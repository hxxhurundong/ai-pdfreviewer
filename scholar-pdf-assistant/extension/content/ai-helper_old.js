// // // content/ai-helper.js
// // // chatgptÁâàÊú¨

// // /* ===================== ÂèØÈÖçÁΩÆÂå∫Âüü ===================== */
// // const AIH_THEME = "dark";               // "dark" Êàñ "light"
// // const OPENAI_API_BASE = "https://api.openai.com/v1/chat/completions";
// // const OPENAI_MODEL = "gpt-5";           // ‰πüÂèØÁî® "gpt-5-chat-latest"
// // const MAX_CHARS_PER_MESSAGE = 120000;   // ÈÅøÂÖçÊ∂àÊÅØËøáÈïøÔºåË∂ÖÂá∫ÂàôËá™Âä®ÂàÜÂùó
// // const PREFETCH_ON_LOAD = true;          // È°µÈù¢Â∞±Áª™ÂêéÈ¢ÑÂÖàÊäΩÂèñÂÖ®ÊñáÔºåÁÇπÂáªÊõ¥Âø´
// // /* ===================================================== */

// // await waitForPDFApp();

// // const panel = ensureResultPanel();
// // applyPanelTheme(panel, panel._header, panel._body); // ÂàùÂßã‰∏ªÈ¢ò
// // const aiBtn = ensureAIButton();
// // let cachedText = null;

// // if (PREFETCH_ON_LOAD) {
// //   prefetchWhenReady().catch(console.warn);
// // }

// // // ÁªëÂÆöÁÇπÂáª
// // aiBtn.addEventListener("click", onClickAI);

// // /* ===================== ‰∫ã‰ª∂Â§ÑÁêÜ ===================== */

// // async function onClickAI() {
// //   try {
// //     aiBtn.disabled = true;
// //     setPanelVisible(true);
// //     clearPanel();
// //     logLine("‚è≥ Ê≠£Âú®ÂáÜÂ§áË∞ÉÁî® AI‚Ä¶‚Ä¶");

// //     const apiKey = await ensureApiKey();
// //     if (!apiKey) {
// //       logLine("‚ùå Êú™Êèê‰æõ API KeyÔºåÂ∑≤ÂèñÊ∂à„ÄÇ");
// //       return;
// //     }

// //     const fullText = cachedText || (await extractFullPdfText());
// //     cachedText = fullText;

// //     logLine(`üìÑ Â∑≤Ëé∑ÂèñÂÖ®ÊñáÔºåÈïøÂ∫¶Á∫¶ ${fullText.length.toLocaleString()} Â≠óÁ¨¶„ÄÇ`);
// //     const analysis = await analyzeWholeDocWithGPT(fullText, apiKey);

// //     logLine("");
// //     logLine("‚úÖ AI ÂàÜÊûêÂÆåÊàêÔºàÂèØÂ§çÂà∂ÔºâÔºö");
// //     appendBlock(analysis);
// //   } catch (err) {
// //     console.error(err);
// //     logLine(`‚ùå Âá∫ÈîôÔºö${err?.message || String(err)}`);
// //   } finally {
// //     aiBtn.disabled = false;
// //   }
// // }

// // /* ===================== UIÔºöÊåâÈíÆ‰∏éÈù¢Êùø ===================== */

// // function ensureAIButton() {
// //   const container = document.getElementById("toolbarViewerRight") || document.body;
// //   let btn = document.getElementById("aiHelperButton");
// //   if (btn) return btn;

// //   btn = document.createElement("button");
// //   btn.id = "aiHelperButton";
// //   btn.className = "toolbarButton";
// //   btn.type = "button";
// //   btn.title = "AI Helper";
// //   btn.textContent = "AI Helper";
// //   container.appendChild(btn);
// //   return btn;
// // }

// // function ensureResultPanel() {
// //   let panel = document.getElementById("aiHelperPanel");
// //   if (panel) return panel;

// //   panel = document.createElement("div");
// //   panel.id = "aiHelperPanel";
// //   Object.assign(panel.style, {
// //     position: "fixed",
// //     right: "12px",
// //     bottom: "12px",
// //     width: "520px",
// //     maxHeight: "70vh",
// //     background: "#fff", // ‰∏ªÈ¢ò‰ºöË¶ÜÁõñ
// //     color: "#111",
// //     border: "1px solid #ddd",
// //     boxShadow: "0 8px 24px rgba(0,0,0,.15)",
// //     borderRadius: "10px",
// //     display: "none",
// //     zIndex: 99999,
// //     overflow: "hidden",
// //     fontFamily: "ui-monospace, SFMono-Regular, Menlo, Consolas, monospace",
// //   });

// //   // Â§¥ÈÉ®
// //   const header = document.createElement("div");
// //   Object.assign(header.style, {
// //     padding: "10px 12px",
// //     fontWeight: "700",
// //     borderBottom: "1px solid #eee",
// //     background: "#f6f7f9",
// //     color: "#111",
// //     display: "flex",
// //     alignItems: "center",
// //     justifyContent: "space-between",
// //     userSelect: "none",
// //     cursor: "move",
// //   });
// //   header.textContent = "AI Helper";

// //   // Â§¥ÈÉ®Âè≥‰æßÂ∑•ÂÖ∑Âå∫
// //   const tools = document.createElement("div");
// //   tools.style.display = "flex";
// //   tools.style.gap = "8px";

// //   // ‰∏ªÈ¢òÂàáÊç¢
// //   const themeBtn = document.createElement("button");
// //   themeBtn.title = "ÂàáÊç¢‰∏ªÈ¢ò";
// //   Object.assign(themeBtn.style, btnStyle());
// //   themeBtn.textContent = AIH_THEME === "dark" ? "‚òÄÔ∏è" : "üåô";
// //   themeBtn.addEventListener("click", () => {
// //     const now = panel.dataset.theme === "dark" ? "light" : "dark";
// //     panel.dataset.theme = now;
// //     themeBtn.textContent = now === "dark" ? "‚òÄÔ∏è" : "üåô";
// //     applyPanelTheme(panel, header, body);
// //   });

// //   // Â§çÂà∂
// //   const copyBtn = document.createElement("button");
// //   copyBtn.title = "Â§çÂà∂ÂÜÖÂÆπ";
// //   Object.assign(copyBtn.style, btnStyle());
// //   copyBtn.textContent = "Â§çÂà∂";
// //   copyBtn.addEventListener("click", () => {
// //     const txt = body.textContent || "";
// //     navigator.clipboard.writeText(txt).then(
// //       () => toast("Â∑≤Â§çÂà∂"),
// //       () => toast("Â§çÂà∂Â§±Ë¥•")
// //     );
// //   });

// //   // Ê∏ÖÁ©∫
// //   const clearBtn = document.createElement("button");
// //   clearBtn.title = "Ê∏ÖÁ©∫";
// //   Object.assign(clearBtn.style, btnStyle());
// //   clearBtn.textContent = "Ê∏ÖÁ©∫";
// //   clearBtn.addEventListener("click", clearPanel);

// //   // ÂÖ≥Èó≠
// //   const closeBtn = document.createElement("button");
// //   closeBtn.title = "ÂÖ≥Èó≠";
// //   Object.assign(closeBtn.style, btnStyle());
// //   closeBtn.textContent = "√ó";
// //   closeBtn.addEventListener("click", () => setPanelVisible(false));

// //   tools.appendChild(themeBtn);
// //   tools.appendChild(copyBtn);
// //   tools.appendChild(clearBtn);
// //   tools.appendChild(closeBtn);

// //   const headerLeft = document.createElement("div");
// //   headerLeft.textContent = "AI Helper";
// //   headerLeft.style.fontWeight = "700";

// //   header.textContent = "";
// //   header.appendChild(headerLeft);
// //   header.appendChild(tools);

// //   // Ê≠£Êñá
// //   const body = document.createElement("pre");
// //   body.id = "aiHelperOutput";
// //   Object.assign(body.style, {
// //     margin: 0,
// //     padding: "12px 14px",
// //     fontSize: "12px",
// //     lineHeight: "1.55",
// //     whiteSpace: "pre-wrap",
// //     overflow: "auto",
// //     maxHeight: "calc(70vh - 48px)",
// //   });

// //   panel.appendChild(header);
// //   panel.appendChild(body);
// //   document.body.appendChild(panel);

// //   // ÊãñÊãΩ
// //   makeDraggable(panel, header);

// //   // ÂØπÂ§ñ‰øùÂ≠òÂºïÁî®
// //   panel._header = header;
// //   panel._body = body;
// //   panel.dataset.theme = AIH_THEME;

// //   return panel;
// // }

// // function btnStyle() {
// //   return {
// //     fontSize: "12px",
// //     padding: "4px 8px",
// //     border: "1px solid rgba(0,0,0,.1)",
// //     borderRadius: "6px",
// //     background: "transparent",
// //     cursor: "pointer",
// //   };
// // }

// // function applyPanelTheme(panel, header, body) {
// //   const theme = panel.dataset.theme || "light";
// //   if (theme === "dark") {
// //     Object.assign(panel.style, {
// //       background: "#111",
// //       color: "#eee",
// //       border: "1px solid #333",
// //       boxShadow: "0 8px 24px rgba(0,0,0,.35)",
// //     });
// //     Object.assign(header.style, {
// //       background: "#1a1a1a",
// //       color: "#fff",
// //       borderBottom: "1px solid #333",
// //     });
// //     Object.assign(body.style, { color: "#eee" });
// //   } else {
// //     Object.assign(panel.style, {
// //       background: "#fff",
// //       color: "#111",
// //       border: "1px solid #ddd",
// //       boxShadow: "0 8px 24px rgba(0,0,0,.15)",
// //     });
// //     Object.assign(header.style, {
// //       background: "#f6f7f9",
// //       color: "#111",
// //       borderBottom: "1px solid #eee",
// //     });
// //     Object.assign(body.style, { color: "#111" });
// //   }
// // }

// // function setPanelVisible(visible) {
// //   panel.style.display = visible ? "block" : "none";
// // }

// // function clearPanel() {
// //   panel._body.textContent = "";
// // }

// // function logLine(text) {
// //   panel._body.textContent += (panel._body.textContent ? "\n" : "") + text;
// //   panel._body.scrollTop = panel._body.scrollHeight;
// // }

// // function appendBlock(text) {
// //   panel._body.textContent += (panel._body.textContent ? "\n" : "") + text;
// //   panel._body.scrollTop = panel._body.scrollHeight;
// // }

// // function toast(msg) {
// //   const tip = document.createElement("div");
// //   tip.textContent = msg;
// //   Object.assign(tip.style, {
// //     position: "fixed",
// //     right: "20px",
// //     bottom: "90px",
// //     padding: "8px 12px",
// //     background: "rgba(0,0,0,.8)",
// //     color: "#fff",
// //     borderRadius: "6px",
// //     fontSize: "12px",
// //     zIndex: 100000,
// //   });
// //   document.body.appendChild(tip);
// //   setTimeout(() => tip.remove(), 1200);
// // }

// // function makeDraggable(panel, handle) {
// //   let isDown = false;
// //   let startX, startY, startRight, startBottom;
// //   handle.addEventListener("mousedown", (e) => {
// //     isDown = true;
// //     startX = e.clientX;
// //     startY = e.clientY;
// //     startRight = parseInt(panel.style.right, 10);
// //     startBottom = parseInt(panel.style.bottom, 10);
// //     document.addEventListener("mousemove", onMove);
// //     document.addEventListener("mouseup", onUp);
// //   });
// //   function onMove(e) {
// //     if (!isDown) return;
// //     const dx = e.clientX - startX;
// //     const dy = e.clientY - startY;
// //     panel.style.right = Math.max(0, startRight - dx) + "px";
// //     panel.style.bottom = Math.max(0, startBottom + dy) + "px";
// //   }
// //   function onUp() {
// //     isDown = false;
// //     document.removeEventListener("mousemove", onMove);
// //     document.removeEventListener("mouseup", onUp);
// //   }
// // }

// // /* ===================== PDF.js ÊäΩÂèñ ===================== */

// // function waitForPDFApp() {
// //   return new Promise((resolve) => {
// //     const tick = () => {
// //       if (window.PDFViewerApplication) resolve();
// //       else setTimeout(tick, 100);
// //     };
// //     tick();
// //   });
// // }

// // async function prefetchWhenReady() {
// //   const app = window.PDFViewerApplication;
// //   while (!app.pdfDocument) await sleep(200);
// //   cachedText = await extractFullPdfText();
// // }

// // async function extractFullPdfText() {
// //   const app = window.PDFViewerApplication;
// //   while (!app.pdfDocument) await sleep(200);

// //   const pdf = app.pdfDocument;
// //   const num = pdf.numPages;

// //   let parts = [];
// //   for (let i = 1; i <= num; i++) {
// //     logLine(`‚è≥ Ê≠£Âú®ÊäΩÂèñÁ¨¨ ${i}/${num} È°µÊñáÊú¨‚Ä¶`);
// //     try {
// //       const page = await pdf.getPage(i);
// //       const tc = await page.getTextContent({ normalizeWhitespace: true });
// //       const text = tc.items.map((it) => it.str).join(" ");
// //       parts.push(`\n\n===== Page ${i}/${num} =====\n${text}`);
// //     } catch (e) {
// //       parts.push(`\n\n===== Page ${i}/${num} =====\n[ËØªÂèñÂ§±Ë¥•Ôºö${e?.message || e}]`);
// //       logLine(`‚ùå Á¨¨ ${i} È°µËØªÂèñÂ§±Ë¥•`);
// //     }
// //     await sleep(0); // ËÆ©Âá∫‰∏ªÁ∫øÁ®ã
// //   }
// //   return parts.join("\n");
// // }

// // function sleep(ms) {
// //   return new Promise((r) => setTimeout(r, ms));
// // }

// // /* ===================== OpenAI Ë∞ÉÁî® ===================== */

// // async function ensureApiKey() {
// //   return new Promise((resolve) => {
// //     chrome.storage.sync.get(["openai_api_key"], (res) => {
// //       let key = res.openai_api_key;
// //       if (key) return resolve(key);

// //       // ÁÆÄÊòìËæìÂÖ•Ê°ÜÔºà‰Ω†‰πüÂèØ‰ª•ÂÅöÊàêËá™ÂÆö‰πâÂºπÁ™óÔºâ
// //       key = prompt("Êâ©Â±ïÁ®ãÂ∫è Scholar PDF Assistant ÊèêÁ§∫Ôºö\nËØ∑ËæìÂÖ• OpenAI API KeyÔºà‰ªÖÈ¶ñÊ¨°Ôºå‰øùÂ≠òÂú® chrome.storage.sync Ôºâ");
// //       if (key) {
// //         chrome.storage.sync.set({ openai_api_key: key }, () => resolve(key));
// //       } else {
// //         resolve(null);
// //       }
// //     });
// //   });
// // }

// // function splitByLength(text, maxLen) {
// //   if (text.length <= maxLen) return [text];
// //   const chunks = [];
// //   for (let i = 0; i < text.length; i += maxLen) {
// //     chunks.push(text.slice(i, i + maxLen));
// //   }
// //   return chunks;
// // }

// // async function chatComplete(messages, apiKey) {
// //   const res = await fetch(OPENAI_API_BASE, {
// //     method: "POST",
// //     headers: {
// //       "Content-Type": "application/json",
// //       Authorization: `Bearer ${apiKey}`,
// //     },
// //     body: JSON.stringify({
// //       model: OPENAI_MODEL,
// //       temperature: 0.2,
// //       messages,
// //     }),
// //   });
// //   if (!res.ok) {
// //     const err = await res.text().catch(() => "");
// //     throw new Error(`OpenAI API ÈîôËØØÔºö${res.status} ${err}`);
// //   }
// //   const data = await res.json();
// //   return data?.choices?.[0]?.message?.content?.trim() || "";
// // }

// // async function analyzeWholeDocWithGPT(fullText, apiKey) {
// //   const chunks = splitByLength(fullText, MAX_CHARS_PER_MESSAGE);

// //   // ÂçïÂùóÔºöÁõ¥Êé•Êï¥ÊñáÂàÜÊûê
// //   if (chunks.length === 1) {
// //     const messages = [
// //       {
// //         role: "system",
// //         content:
// //           "‰Ω†ÊòØÂ≠¶ÊúØ PDF Âä©Êâã„ÄÇËØ∑Ôºö1) ÊèêÂèñ/ÁåúÊµãÊ†áÈ¢òÔºõ2) Êé®Êñ≠Á†îÁ©∂È¢ÜÂüüÔºõ3) ÊÄªÁªìÊ†∏ÂøÉÈóÆÈ¢ò„ÄÅÊñπÊ≥ï„ÄÅÁªìËÆ∫Ôºõ4) ËØÜÂà´ÂèÇËÄÉÊñáÁåÆÂå∫ÊÆµÔºàËã•ÊúâÔºâÔºõ5) ËæìÂá∫ÈÄÇÂêàÂÜôÂú®È´ò‰∫ÆÊóÅÁöÑÁÆÄÁü≠Ê≥®ÈáäÂª∫ËÆÆÔºàÂ≠êÂºπÁÇπÔºâ„ÄÇÁî®‰∏≠ÊñáÔºåÁªìÊûÑÊ∏ÖÊô∞„ÄÇ",
// //       },
// //       {
// //         role: "user",
// //         content: `‰ª•‰∏ãÊòØÊï¥ÁØá PDF ÁöÑÊñáÊú¨ÔºåËØ∑ÈÄöËØªÔºö\n${fullText}`,
// //       },
// //     ];
// //     return await chatComplete(messages, apiKey);
// //   }

// //   // Â§öÂùóÔºöÂàÜÂùóÊëòË¶Å ‚Üí Ê±áÊÄª
// //   logLine(`üì¶ ÊñáÊ°£ËæÉÂ§ßÔºåÂàÜ‰∏∫ ${chunks.length} ÂùóËøõË°åÂ§ÑÁêÜ‚Ä¶`);
// //   const summaries = [];
// //   for (let i = 0; i < chunks.length; i++) {
// //     logLine(`‚è≥ ÂàÜÂùó ${i + 1}/${chunks.length} ÂàÜÊûê‰∏≠‚Ä¶`);
// //     const messages = [
// //       {
// //         role: "system",
// //         content:
// //           "‰Ω†ÊòØÂ≠¶ÊúØ PDF Âä©Êâã„ÄÇËØ∑ÂØπÊî∂Âà∞ÁöÑËøô‰∏ÄÂàÜÂùóÂÜôË¶ÅÁÇπÊëòË¶ÅÔºåÊ†áÂá∫ÂÖ≥ÈîÆÊúØËØ≠„ÄÅÂèØËÉΩÁöÑÁ´†ËäÇÊ†áÈ¢òÔºå‰ª•ÂèäËã•Âá∫Áé∞‚ÄúÂèÇËÄÉÊñáÁåÆ/References/Bibliography‚ÄùÁ≠âÁ∫øÁ¥¢ËØ∑ËÆ∞ÂΩï„ÄÇ",
// //       },
// //       { role: "user", content: `PDF ÂàÜÂùó ${i + 1}/${chunks.length}Ôºö\n${chunks[i]}` },
// //     ];
// //     const s = await chatComplete(messages, apiKey);
// //     summaries.push(`=== Chunk ${i + 1} Summary ===\n${s}`);
// //   }

// //   logLine("üîó Ê≠£Âú®Ê±áÊÄªÊâÄÊúâÂàÜÂùóÁªìÊûú‚Ä¶");
// //   const mergeMessages = [
// //     {
// //       role: "system",
// //       content:
// //         "ÊääËøô‰∫õÂàÜÂùóÊëòË¶ÅÂêàÂπ∂‰∏∫ÂÆåÊï¥Êä•ÂëäÔºö1) ËÆ∫ÊñáÊ†áÈ¢òÔºàËã•‰∏çÁ°ÆÂÆöÁªôÂÄôÈÄâÔºâÔºõ2) Á†îÁ©∂È¢ÜÂüüÔºõ3) ‰∏ªË¶ÅË¥°ÁåÆ‰∏éÁªìËÆ∫Ôºõ4) ÊñπÊ≥ï/ÂÆûÈ™åË¶ÅÁÇπÔºõ5) ÂèÇËÄÉÊñáÁåÆÂå∫ÊÆµ‰∏éÊù°ÁõÆÁ∫øÁ¥¢Ôºõ6) ÈÄÇÂêàË¥¥Âú®È´ò‰∫ÆÊóÅÁöÑÁÆÄÁü≠Ê≥®ÈáäÂª∫ËÆÆÔºàË¶ÅÁÇπÂàóÂá∫Ôºâ„ÄÇÁî®‰∏≠ÊñáÔºåÁªìÊûÑÊ∏ÖÊô∞„ÄÇ",
// //     },
// //     { role: "user", content: summaries.join("\n\n") },
// //   ];
// //   return await chatComplete(mergeMessages, apiKey);
// // }



// // content/ai-helper.js  ‚Äî‚Äî Gemini Áâà
// // Âú® PDF.js viewer ‰∏≠ÊèíÂÖ• ‚ÄúAI Helper‚Äù ÊåâÈíÆÔºõÊäΩÂèñÂÖ®ÊñáÂπ∂ÂèëÈÄÅÂà∞ Google Gemini Free Tier ÂÅöÊï¥ÊñáÂàÜÊûêÔºõ
// // Ëá™Â∏¶ÊµÖ/Ê∑±Ëâ≤‰∏ªÈ¢ò‰∏é‰∏ªÈ¢òÂàáÊç¢ÔºõÈ¶ñÊ¨°ÁÇπÂáª‰ºöÊèêÁ§∫Â°´ÂÜô API KeyÔºà‰øùÂ≠òÂú® chrome.storage.syncÔºâ„ÄÇ

// /* ===================== ÂèØÈÖçÁΩÆÂå∫Âüü ===================== */
// const AIH_THEME = "dark"; // "dark" Êàñ "light"

// // Gemini REST APIÔºàGenerative Language API v1betaÔºâ
// const GEMINI_API_BASE = "https://generativelanguage.googleapis.com/v1beta/models";
// // Ê®°ÂûãÂÄôÈÄâÔºàÊåâÈ°∫Â∫èÂ∞ùËØïÔºåÂì™‰∏™ÂèØÁî®Â∞±Áî®Âì™‰∏™ÔºõFree Tier ÈÄöÂ∏∏ÂèØÁî® 1.5-flashÔºâ
// const GEMINI_MODEL_CHAIN = ["gemini-1.5-flash-latest", "gemini-1.5-flash", "gemini-1.5-pro-latest"];

// // ÂèëÈÄÅÁªôÊ®°ÂûãÁöÑÈÖçÁΩÆ
// const TEMPERATURE = 0.2;
// const MAX_CHARS_PER_MESSAGE = 120000; // Ë∂ÖÂá∫Âç≥ÂàÜÂùó
// const PREFETCH_ON_LOAD = true;        // È°µÈù¢Â∞±Áª™ÂêéÈ¢ÑÊäΩÂÖ®ÊñáÔºåÁÇπÂáªÊõ¥Âø´
// /* ===================================================== */

// await waitForPDFApp();

// const panel = ensureResultPanel();
// applyPanelTheme(panel, panel._header, panel._body);
// const aiBtn = ensureAIButton();
// let cachedText = null;

// if (PREFETCH_ON_LOAD) prefetchWhenReady().catch(console.warn);

// aiBtn.addEventListener("click", onClickAI);

// /* ===================== ‰∏ªÊµÅÁ®ã ===================== */
// async function onClickAI() {
//   try {
//     aiBtn.disabled = true;
//     setPanelVisible(true);
//     clearPanel();
//     logLine("‚è≥ Ê≠£Âú®ÂáÜÂ§áË∞ÉÁî® AI‚Ä¶‚Ä¶");

//     const apiKey = await ensureGeminiKey();
//     if (!apiKey) {
//       logLine("‚ùå Êú™Êèê‰æõ Gemini API KeyÔºåÂ∑≤ÂèñÊ∂à„ÄÇ");
//       return;
//     }

//     const fullText = cachedText || (await extractFullPdfText());
//     cachedText = fullText;
//     logLine(`üìÑ Â∑≤Ëé∑ÂèñÂÖ®ÊñáÔºåÈïøÂ∫¶Á∫¶ ${fullText.length.toLocaleString()} Â≠óÁ¨¶„ÄÇ`);

//     const output = await analyzeWholeDocWithGemini(fullText, apiKey);
//     logLine("");
//     logLine("‚úÖ AI ÂàÜÊûêÂÆåÊàêÔºàÂèØÂ§çÂà∂ÔºâÔºö");
//     appendBlock(output);
//   } catch (err) {
//     console.error(err);
//     logLine(`‚ùå Âá∫ÈîôÔºö${err?.message || String(err)}`);
//   } finally {
//     aiBtn.disabled = false;
//   }
// }

// /* ===================== UIÔºöÊåâÈíÆ‰∏éÈù¢Êùø ===================== */
// function ensureAIButton() {
//   const container = document.getElementById("toolbarViewerRight") || document.body;
//   let btn = document.getElementById("aiHelperButton");
//   if (btn) return btn;

//   btn = document.createElement("button");
//   btn.id = "aiHelperButton";
//   btn.className = "toolbarButton";
//   btn.type = "button";
//   btn.title = "AI Helper";
//   btn.textContent = "AI Helper";
//   container.appendChild(btn);
//   return btn;
// }

// function ensureResultPanel() {
//   let panel = document.getElementById("aiHelperPanel");
//   if (panel) return panel;

//   panel = document.createElement("div");
//   panel.id = "aiHelperPanel";
//   Object.assign(panel.style, {
//     position: "fixed",
//     right: "12px",
//     bottom: "12px",
//     width: "520px",
//     maxHeight: "70vh",
//     background: "#fff",
//     color: "#111",
//     border: "1px solid #ddd",
//     boxShadow: "0 8px 24px rgba(0,0,0,.15)",
//     borderRadius: "10px",
//     display: "none",
//     zIndex: 99999,
//     overflow: "hidden",
//     fontFamily: "ui-monospace, SFMono-Regular, Menlo, Consolas, monospace",
//   });

//   const header = document.createElement("div");
//   Object.assign(header.style, {
//     padding: "10px 12px",
//     fontWeight: "700",
//     borderBottom: "1px solid #eee",
//     background: "#f6f7f9",
//     color: "#111",
//     display: "flex",
//     alignItems: "center",
//     justifyContent: "space-between",
//     userSelect: "none",
//     cursor: "move",
//   });

//   const headerLeft = document.createElement("div");
//   headerLeft.textContent = "AI Helper";
//   headerLeft.style.fontWeight = "700";

//   const tools = document.createElement("div");
//   tools.style.display = "flex";
//   tools.style.gap = "8px";

//   const themeBtn = document.createElement("button");
//   Object.assign(themeBtn.style, btnStyle());
//   themeBtn.title = "ÂàáÊç¢‰∏ªÈ¢ò";
//   themeBtn.textContent = AIH_THEME === "dark" ? "‚òÄÔ∏è" : "üåô";
//   themeBtn.addEventListener("click", () => {
//     const now = panel.dataset.theme === "dark" ? "light" : "dark";
//     panel.dataset.theme = now;
//     themeBtn.textContent = now === "dark" ? "‚òÄÔ∏è" : "üåô";
//     applyPanelTheme(panel, header, body);
//   });

//   const copyBtn = document.createElement("button");
//   Object.assign(copyBtn.style, btnStyle());
//   copyBtn.title = "Â§çÂà∂ÂÜÖÂÆπ";
//   copyBtn.textContent = "Â§çÂà∂";
//   copyBtn.addEventListener("click", () => {
//     const txt = body.textContent || "";
//     navigator.clipboard.writeText(txt).then(
//       () => toast("Â∑≤Â§çÂà∂"),
//       () => toast("Â§çÂà∂Â§±Ë¥•")
//     );
//   });

//   const clearBtn = document.createElement("button");
//   Object.assign(clearBtn.style, btnStyle());
//   clearBtn.title = "Ê∏ÖÁ©∫";
//   clearBtn.textContent = "Ê∏ÖÁ©∫";
//   clearBtn.addEventListener("click", clearPanel);

//   const closeBtn = document.createElement("button");
//   Object.assign(closeBtn.style, btnStyle());
//   closeBtn.title = "ÂÖ≥Èó≠";
//   closeBtn.textContent = "√ó";
//   closeBtn.addEventListener("click", () => setPanelVisible(false));

//   tools.appendChild(themeBtn);
//   tools.appendChild(copyBtn);
//   tools.appendChild(clearBtn);
//   tools.appendChild(closeBtn);

//   header.appendChild(headerLeft);
//   header.appendChild(tools);

//   const body = document.createElement("pre");
//   body.id = "aiHelperOutput";
//   Object.assign(body.style, {
//     margin: 0,
//     padding: "12px 14px",
//     fontSize: "12px",
//     lineHeight: "1.55",
//     whiteSpace: "pre-wrap",
//     overflow: "auto",
//     maxHeight: "calc(70vh - 48px)",
//   });

//   panel.appendChild(header);
//   panel.appendChild(body);
//   document.body.appendChild(panel);

//   makeDraggable(panel, header);

//   panel._header = header;
//   panel._body = body;
//   panel.dataset.theme = AIH_THEME;
//   return panel;
// }

// function btnStyle() {
//   return {
//     fontSize: "12px",
//     padding: "4px 8px",
//     border: "1px solid rgba(0,0,0,.1)",
//     borderRadius: "6px",
//     background: "transparent",
//     cursor: "pointer",
//   };
// }

// function applyPanelTheme(panel, header, body) {
//   const theme = panel.dataset.theme || "light";
//   if (theme === "dark") {
//     Object.assign(panel.style, {
//       background: "#111",
//       color: "#eee",
//       border: "1px solid #333",
//       boxShadow: "0 8px 24px rgba(0,0,0,.35)",
//     });
//     Object.assign(header.style, {
//       background: "#1a1a1a",
//       color: "#fff",
//       borderBottom: "1px solid #333",
//     });
//     Object.assign(body.style, { color: "#eee" });
//   } else {
//     Object.assign(panel.style, {
//       background: "#fff",
//       color: "#111",
//       border: "1px solid #ddd",
//       boxShadow: "0 8px 24px rgba(0,0,0,.15)",
//     });
//     Object.assign(header.style, {
//       background: "#f6f7f9",
//       color: "#111",
//       borderBottom: "1px solid #eee",
//     });
//     Object.assign(body.style, { color: "#111" });
//   }
// }

// function setPanelVisible(visible) {
//   panel.style.display = visible ? "block" : "none";
// }
// function clearPanel() { panel._body.textContent = ""; }
// function logLine(text) {
//   panel._body.textContent += (panel._body.textContent ? "\n" : "") + text;
//   panel._body.scrollTop = panel._body.scrollHeight;
// }
// function appendBlock(text) { logLine(text); }

// function toast(msg) {
//   const tip = document.createElement("div");
//   tip.textContent = msg;
//   Object.assign(tip.style, {
//     position: "fixed",
//     right: "20px",
//     bottom: "90px",
//     padding: "8px 12px",
//     background: "rgba(0,0,0,.8)",
//     color: "#fff",
//     borderRadius: "6px",
//     fontSize: "12px",
//     zIndex: 100000,
//   });
//   document.body.appendChild(tip);
//   setTimeout(() => tip.remove(), 1200);
// }

// function makeDraggable(panel, handle) {
//   let isDown = false;
//   let startX, startY, startRight, startBottom;
//   handle.addEventListener("mousedown", (e) => {
//     isDown = true;
//     startX = e.clientX; startY = e.clientY;
//     startRight = parseInt(panel.style.right, 10);
//     startBottom = parseInt(panel.style.bottom, 10);
//     document.addEventListener("mousemove", onMove);
//     document.addEventListener("mouseup", onUp);
//   });
//   function onMove(e) {
//     if (!isDown) return;
//     const dx = e.clientX - startX;
//     const dy = e.clientY - startY;
//     panel.style.right = Math.max(0, startRight - dx) + "px";
//     panel.style.bottom = Math.max(0, startBottom + dy) + "px";
//   }
//   function onUp() {
//     isDown = false;
//     document.removeEventListener("mousemove", onMove);
//     document.removeEventListener("mouseup", onUp);
//   }
// }

// /* ===================== PDF.js ÊäΩÂèñ ===================== */
// function waitForPDFApp() {
//   return new Promise((resolve) => {
//     const tick = () => (window.PDFViewerApplication ? resolve() : setTimeout(tick, 100));
//     tick();
//   });
// }
// async function prefetchWhenReady() {
//   const app = window.PDFViewerApplication;
//   while (!app.pdfDocument) await sleep(200);
//   cachedText = await extractFullPdfText();
// }
// async function extractFullPdfText() {
//   const app = window.PDFViewerApplication;
//   while (!app.pdfDocument) await sleep(200);
//   const pdf = app.pdfDocument;
//   const num = pdf.numPages;

//   const parts = [];
//   for (let i = 1; i <= num; i++) {
//     logLine(`‚è≥ Ê≠£Âú®ÊäΩÂèñÁ¨¨ ${i}/${num} È°µÊñáÊú¨‚Ä¶`);
//     try {
//       const page = await pdf.getPage(i);
//       const tc = await page.getTextContent({ normalizeWhitespace: true });
//       const text = tc.items.map((it) => it.str).join(" ");
//       parts.push(`\n\n===== Page ${i}/${num} =====\n${text}`);
//     } catch (e) {
//       parts.push(`\n\n===== Page ${i}/${num} =====\n[ËØªÂèñÂ§±Ë¥•Ôºö${e?.message || e}]`);
//       logLine(`‚ùå Á¨¨ ${i} È°µËØªÂèñÂ§±Ë¥•`);
//     }
//     await sleep(0);
//   }
//   return parts.join("\n");
// }
// function sleep(ms) { return new Promise((r) => setTimeout(r, ms)); }

// /* ===================== Gemini Ë∞ÉÁî® ===================== */
// // ‰ªé storage Âèñ/Â≠ò Gemini Key
// async function ensureGeminiKey() {
//   return new Promise((resolve) => {
//     chrome.storage.sync.get(["gemini_api_key"], (res) => {
//       let key = res.gemini_api_key;
//       if (key) return resolve(key);
//       key = prompt("ËØ∑ËæìÂÖ• Google Gemini API KeyÔºà‰ªÖÈ¶ñÊ¨°Ôºå‰øùÂ≠òÂú® chrome.storage.syncÔºâ");
//       if (key) chrome.storage.sync.set({ gemini_api_key: key }, () => resolve(key));
//       else resolve(null);
//     });
//   });
// }

// // ÂçïÊ¨° generateContent Ë∞ÉÁî®
// async function geminiGenerate({ systemPrompt, userText, apiKey, model }) {
//   const url = `${GEMINI_API_BASE}/${encodeURIComponent(model)}:generateContent?key=${encodeURIComponent(apiKey)}`;
//   const body = {
//     // system promptÔºöÁî® new propertyÔºàÂ¶ÇÊûú‰∏çÊîØÊåÅÂàôÂπ∂ÂÖ• user ÊñáÊú¨Ôºâ
//     // ÂÖºÂÆπÂÅöÊ≥ïÔºöÊää systemPrompt ÊãºÂà∞ user ÊñáÊú¨ÂâçÈù¢
//     contents: [
//       {
//         role: "user",
//         parts: [{ text: `${systemPrompt ? systemPrompt + "\n\n" : ""}${userText}` }],
//       },
//     ],
//     generationConfig: { temperature: TEMPERATURE },
//   };

//   const res = await fetch(url, {
//     method: "POST",
//     headers: { "Content-Type": "application/json" },
//     body: JSON.stringify(body),
//   });

//   const errText = await res.text();
//   if (!res.ok) {
//     // Â∏∏ËßÅÔºö403ÔºàÊú™ÂºÄÊ®°Âûã/Key ÊùÉÈôêÔºâ„ÄÅ429ÔºàÈÄüÁéá/ÈÖçÈ¢ùÔºâ„ÄÅ400ÔºàË∂ÖÈôêÔºâ
//     throw new Error(`Gemini API ÈîôËØØÔºö${res.status} ${errText}`);
//   }

//   let data;
//   try { data = JSON.parse(errText); } catch { data = {}; }

//   const parts = data?.candidates?.[0]?.content?.parts || [];
//   const text = parts.map(p => p.text || "").join("").trim();
//   return { text, modelUsed: model };
// }

// // Â∏¶ÂÄôÈÄâÊ®°ÂûãÁöÑÈôçÁ∫ßÂåÖË£Ö
// async function geminiGenerateWithFallback({ systemPrompt, userText, apiKey }) {
//   let lastErr;
//   for (const model of GEMINI_MODEL_CHAIN) {
//     try {
//       logLine(`üîé Â∞ùËØïÊ®°ÂûãÔºö${model} ‚Ä¶`);
//       const { text, modelUsed } = await geminiGenerate({ systemPrompt, userText, apiKey, model });
//       if (modelUsed !== GEMINI_MODEL_CHAIN[0]) logLine(`‚ÑπÔ∏è Â∑≤Ëá™Âä®ÈôçÁ∫ßÂà∞ÂèØÁî®Ê®°ÂûãÔºö${modelUsed}`);
//       return text;
//     } catch (e) {
//       lastErr = e;
//       logLine(`‚ö†Ô∏è Ê®°Âûã‰∏çÂèØÁî®Ôºö${e.message.split("\n")[0]}`);
//       continue;
//     }
//   }
//   throw lastErr || new Error("ÊâÄÊúâÂÄôÈÄâÊ®°ÂûãÂùá‰∏çÂèØÁî®„ÄÇ");
// }

// /* ===================== ‰ªªÂä°Â∞ÅË£ÖÔºöÊï¥Êñá/ÂàÜÂùóÂàÜÊûê ===================== */
// function splitByLength(text, maxLen) {
//   if (text.length <= maxLen) return [text];
//   const chunks = [];
//   for (let i = 0; i < text.length; i += maxLen) chunks.push(text.slice(i, i + maxLen));
//   return chunks;
// }

// async function analyzeWholeDocWithGemini(fullText, apiKey) {
//   const system_single =
//     "‰Ω†ÊòØÂ≠¶ÊúØ PDF Âä©Êâã„ÄÇËØ∑Ôºö1) ÊèêÂèñ/ÁåúÊµãÊ†áÈ¢òÔºõ2) Êé®Êñ≠Á†îÁ©∂È¢ÜÂüüÔºõ3) ÊÄªÁªìÊ†∏ÂøÉÈóÆÈ¢ò„ÄÅÊñπÊ≥ï„ÄÅÁªìËÆ∫Ôºõ4) ËØÜÂà´ÂèÇËÄÉÊñáÁåÆÂå∫ÊÆµÔºàËã•ÊúâÔºâÔºõ5) ËæìÂá∫ÈÄÇÂêàÂÜôÂú®È´ò‰∫ÆÊóÅÁöÑÁÆÄÁü≠Ê≥®ÈáäÂª∫ËÆÆÔºàÂ≠êÂºπÁÇπÔºâ„ÄÇÁî®‰∏≠ÊñáÔºåÁªìÊûÑÊ∏ÖÊô∞„ÄÇ";

//   const chunks = splitByLength(fullText, MAX_CHARS_PER_MESSAGE);

//   if (chunks.length === 1) {
//     return await geminiGenerateWithFallback({
//       systemPrompt: system_single,
//       userText: `‰ª•‰∏ãÊòØÊï¥ÁØá PDF ÁöÑÊñáÊú¨ÔºåËØ∑ÈÄöËØªÔºö\n${fullText}`,
//       apiKey,
//     });
//   }

//   // Â§öÂùóÔºöÂàÜÂùóÊëòË¶Å ‚Üí Ê±áÊÄª
//   logLine(`üì¶ ÊñáÊ°£ËæÉÂ§ßÔºåÂàÜ‰∏∫ ${chunks.length} ÂùóËøõË°åÂ§ÑÁêÜ‚Ä¶`);

//   const chunkSummaries = [];
//   for (let i = 0; i < chunks.length; i++) {
//     logLine(`‚è≥ ÂàÜÂùó ${i + 1}/${chunks.length} ÂàÜÊûê‰∏≠‚Ä¶`);
//     const text = await geminiGenerateWithFallback({
//       systemPrompt:
//         "‰Ω†ÊòØÂ≠¶ÊúØ PDF Âä©Êâã„ÄÇËØ∑ÂØπÊî∂Âà∞ÁöÑËøô‰∏ÄÂàÜÂùóÂÜôË¶ÅÁÇπÊëòË¶ÅÔºåÊ†áÂá∫ÂÖ≥ÈîÆÊúØËØ≠„ÄÅÂèØËÉΩÁöÑÁ´†ËäÇÊ†áÈ¢òÔºå‰ª•ÂèäËã•Âá∫Áé∞‚ÄúÂèÇËÄÉÊñáÁåÆ/References/Bibliography‚ÄùÁ≠âÁ∫øÁ¥¢ËØ∑ËÆ∞ÂΩï„ÄÇ",
//       userText: `PDF ÂàÜÂùó ${i + 1}/${chunks.length}Ôºö\n${chunks[i]}`,
//       apiKey,
//     });
//     chunkSummaries.push(`=== Chunk ${i + 1} Summary ===\n${text}`);
//   }

//   logLine("üîó Ê≠£Âú®Ê±áÊÄªÊâÄÊúâÂàÜÂùóÁªìÊûú‚Ä¶");
//   return await geminiGenerateWithFallback({
//     systemPrompt:
//       "ÊääËøô‰∫õÂàÜÂùóÊëòË¶ÅÂêàÂπ∂‰∏∫ÂÆåÊï¥Êä•ÂëäÔºö1) ËÆ∫ÊñáÊ†áÈ¢òÔºàËã•‰∏çÁ°ÆÂÆöÁªôÂÄôÈÄâÔºâÔºõ2) Á†îÁ©∂È¢ÜÂüüÔºõ3) ‰∏ªË¶ÅË¥°ÁåÆ‰∏éÁªìËÆ∫Ôºõ4) ÊñπÊ≥ï/ÂÆûÈ™åË¶ÅÁÇπÔºõ5) ÂèÇËÄÉÊñáÁåÆÂå∫ÊÆµ‰∏éÊù°ÁõÆÁ∫øÁ¥¢Ôºõ6) ÈÄÇÂêàË¥¥Âú®È´ò‰∫ÆÊóÅÁöÑÁÆÄÁü≠Ê≥®ÈáäÂª∫ËÆÆÔºàË¶ÅÁÇπÂàóÂá∫Ôºâ„ÄÇÁî®‰∏≠ÊñáÔºåÁªìÊûÑÊ∏ÖÊô∞„ÄÇ",
//     userText: chunkSummaries.join("\n\n"),
//     apiKey,
//   });
// }


// content/ai-helper.js  ‚Äî‚Äî Gemini Áâà + Chat ‰∫§‰∫í
// ÂäüËÉΩÔºö
// 1) Â∑•ÂÖ∑Ê†è‚ÄúAI Helper‚ÄùÊåâÈíÆÔºöÊï¥ÊñáÊäΩÂèñÂπ∂ÂÅö‰∏ÄÊ¨°ÊÄßÂàÜÊûêÔºà‰øùÁïô‰Ω†ÂéüÈÄªËæëÔºâ
// 2) Èù¢ÊùøÂ∫ïÈÉ®ËæìÂÖ•Ê°ÜÔºö‰∏é AI Â§öËΩÆÂØπËØùÔºàËá™Âä®Êê∫Â∏¶Êú¨ PDF ÁöÑÊëòË¶Å‰Ωú‰∏∫‰∏ä‰∏ãÊñáÔºâ
// 3) ‰∏ªÈ¢òÂàáÊç¢„ÄÅÂ§çÂà∂„ÄÅÊ∏ÖÁ©∫„ÄÅÂÖ≥Èó≠Ôºõ‰øÆÂ§çÂ∫ïÈÉ®ÈÅÆÊå°ÔºàÊä¨È´ò + ÂºπÊÄßÂ∏ÉÂ±Ä + paddingÔºâ

/* ===================== ÂèØÈÖçÁΩÆÂå∫Âüü ===================== */
const AIH_THEME = "dark"; // "dark" Êàñ "light"

// Gemini REST APIÔºàGenerative Language API v1betaÔºâ
const GEMINI_API_BASE = "https://generativelanguage.googleapis.com/v1beta/models";
// Ê®°ÂûãÂÄôÈÄâÔºàÊåâÈ°∫Â∫èÂ∞ùËØïÔºåÂì™‰∏™ÂèØÁî®Â∞±Áî®Âì™‰∏™ÔºõFree Tier ÈÄöÂ∏∏ÂèØÁî® 1.5-flashÔºâ
const GEMINI_MODEL_CHAIN = ["gemini-1.5-flash-latest", "gemini-1.5-flash", "gemini-1.5-pro-latest"];

const TEMPERATURE = 0.2;
const MAX_CHARS_PER_MESSAGE = 120000; // Ë∂ÖÂá∫Âç≥ÂàÜÂùóÔºàÊï¥ÊñáÂàÜÊûê‰ΩøÁî®Ôºâ
const PREFETCH_ON_LOAD = true;        // È°µÈù¢Â∞±Áª™ÂêéÈ¢ÑÊäΩÂÖ®Êñá
const DOC_SUMMARY_MAX_CHARS = 40000;  // Áî®‰∫éÂØπËØù‰∏ä‰∏ãÊñáÁöÑÊñáÊ°£ÊëòË¶ÅËæìÂÖ•‰∏äÈôêÔºàËäÇÁúÅÈÖçÈ¢ùÔºâ
/* ===================================================== */

await waitForPDFApp();

const panel = ensureResultPanel();            // Èù¢ÊùøÔºàÂê´ËæìÂÖ•Ê°ÜÔºâ
applyPanelTheme(panel, panel._header, panel._body);
const aiBtn = ensureAIButton();               // Â∑•ÂÖ∑Ê†èÊåâÈíÆÔºàÊï¥ÊñáÂàÜÊûêÔºâ

let cachedText = null;                        // PDF ÂÖ®ÊñáÁºìÂ≠ò
let docSummary = null;                        // PDF ÊëòË¶ÅÁºìÂ≠òÔºà‰æõÂØπËØù‰∏ä‰∏ãÊñáÁî®Ôºâ
const chatHistory = [];                       // ‰∏é AI ÁöÑÂØπËØùÂéÜÂè≤Ôºà[{role:"user"|"model", text:"..."}]Ôºâ

if (PREFETCH_ON_LOAD) prefetchWhenReady().catch(console.warn);

// Êï¥ÊñáÂàÜÊûêÊåâÈíÆ
aiBtn.addEventListener("click", onClickAI);

// ËæìÂÖ•Ê°ÜÂèëÈÄÅÔºàÁÇπÂáªÊåâÈíÆÔºâ
panel._sendBtn.addEventListener("click", handleSendFromUI);
// ËæìÂÖ•Ê°ÜÂèëÈÄÅÔºàÊåâÈîÆÔºâ
panel._input.addEventListener("keydown", (e) => {
  if (e.key === "Enter" && !e.shiftKey) {
    e.preventDefault();
    handleSendFromUI();
  }
});

/* ===================== ‰∏ªÊµÅÁ®ãÔºö‰∏ÄÊ¨°ÊÄßÊï¥ÊñáÂàÜÊûê ===================== */
async function onClickAI() {
  try {
    aiBtn.disabled = true;
    setPanelVisible(true);
    clearPanel();
    logLine("‚è≥ Ê≠£Âú®ÂáÜÂ§áË∞ÉÁî® AI‚Ä¶‚Ä¶");

    const apiKey = await ensureGeminiKey();
    if (!apiKey) {
      logLine("‚ùå Êú™Êèê‰æõ Gemini API KeyÔºåÂ∑≤ÂèñÊ∂à„ÄÇ");
      return;
    }

    const fullText = cachedText || (await extractFullPdfText());
    cachedText = fullText;
    logLine(`üìÑ Â∑≤Ëé∑ÂèñÂÖ®ÊñáÔºåÈïøÂ∫¶Á∫¶ ${fullText.length.toLocaleString()} Â≠óÁ¨¶„ÄÇ`);

    const output = await analyzeWholeDocWithGemini(fullText, apiKey);
    logLine("");
    logLine("‚úÖ AI ÂàÜÊûêÂÆåÊàêÔºàÂèØÂ§çÂà∂ÔºâÔºö");
    appendBlock(output);

    // È°∫‰æøÁîüÊàê/Êõ¥Êñ∞ÂØπËØùÊâÄÈúÄÁöÑÊëòË¶ÅÔºàÂêéÁª≠ËÅäÂ§©Êõ¥ÂáÜÔºâ
    try {
      await ensureDocSummary(apiKey);
    } catch (e) {
      console.warn("ÁîüÊàêÂØπËØùÊëòË¶ÅÂ§±Ë¥•Ôºö", e);
    }
  } catch (err) {
    console.error(err);
    logLine(`‚ùå Âá∫ÈîôÔºö${err?.message || String(err)}`);
  } finally {
    aiBtn.disabled = false;
  }
}

/* ===================== Chat ‰∫§‰∫í ===================== */
// ‰ªéÈù¢ÊùøÂ∫ïÈÉ®ËæìÂÖ•Ê°ÜËØªÂèñÂπ∂ÂèëÈÄÅ
async function handleSendFromUI() {
  const text = (panel._input.value || "").trim();
  if (!text) return;

  panel._input.value = "";
  appendChatBubble("user", text);
  chatHistory.push({ role: "user", text });

  try {
    panel._sendBtn.disabled = true;

    const apiKey = await ensureGeminiKey();
    if (!apiKey) {
      appendChatBubble("model", "‚ùå Êú™Êèê‰æõ Gemini API Key„ÄÇ");
      return;
    }

    // Á°Æ‰øùÊúâÂÖ®ÊñáÔºàÁî®‰∫éÁîüÊàêÊëòË¶ÅÔºâ
    const fullText = cachedText || (await extractFullPdfText());
    cachedText = fullText;

    // Á°Æ‰øùÊúâÊñáÊ°£ÊëòË¶ÅÔºàÂØπËØù‰∏ä‰∏ãÊñáÔºâ
    await ensureDocSummary(apiKey);

    // Ë∞ÉÁî®‰∏ÄÊ¨°ÂØπËØù
    const reply = await chatOnceWithGemini(apiKey);
    appendChatBubble("model", reply);
    chatHistory.push({ role: "model", text: reply });
  } catch (e) {
    console.error(e);
    appendChatBubble("model", `‚ùå Âá∫ÈîôÔºö${e?.message || String(e)}`);
  } finally {
    panel._sendBtn.disabled = false;
    panel._input.focus();
  }
}

// ÁªÑÁªáÂØπËØùÂÜÖÂÆπÂπ∂Ë∞ÉÁî®ÔºàGemini Â§öËΩÆÔºâ
async function chatOnceWithGemini(apiKey) {
  // contentsÔºöÂÖàÊîæÂÖ•‚ÄúÊñáÊ°£ÊëòË¶Å‚Äù‰Ωú‰∏∫ÂâçÁΩÆ‰∏ä‰∏ãÊñáÔºåÁÑ∂ÂêéÊåâÈ°∫Â∫èÈôÑ‰∏äÂéÜÂè≤ÂØπËØù
  const contents = [];

  const summaryPrefix =
    "‰ª•‰∏ãÊòØÊú¨ PDF ÊñáÊ°£ÁöÑÊëòË¶ÅÔºàÂØπÂêéÁª≠ÈóÆÁ≠î‰ªÖ‰ΩúÂèÇËÄÉÔºå‰∏çÁ≠â‰∫éÂÖ®ÊñáÔºâÔºö\n" +
    (docSummary || "ÔºàÊëòË¶ÅÁîüÊàêÂ§±Ë¥•Ôºâ") +
    "\n‚Äî‚ÄîËØ∑ÁªìÂêà‰ª•‰∏äÊëòË¶Å‰∏éÂØπËØùÂéÜÂè≤ÂõûÁ≠îÁî®Êà∑ÈóÆÈ¢ò„ÄÇ";

  contents.push({ role: "user", parts: [{ text: summaryPrefix }] });

  chatHistory.forEach((m) => {
    contents.push({ role: m.role, parts: [{ text: m.text }] });
  });

  // Áî®‚Äú(Áî®Êà∑)‚ÄùÊúÄÂêé‰∏ÄÊù°‰Ωú‰∏∫ËøôÊ¨°ÁöÑÈóÆÈ¢òÔºõ‰∏äÈù¢Â∑≤ÁªèÂåÖÂê´Âú® chatHistory ÈáåÔºåËøôÈáåÁõ¥Êé•Âèë contents
  const reply = await geminiChatWithFallback({ contents, apiKey });
  return reply;
}

/* ===================== UIÔºöÊåâÈíÆ‰∏éÈù¢Êùø ===================== */
function ensureAIButton() {
  const container = document.getElementById("toolbarViewerRight") || document.body;
  let btn = document.getElementById("aiHelperButton");
  if (btn) return btn;

  btn = document.createElement("button");
  btn.id = "aiHelperButton";
  btn.className = "toolbarButton";
  btn.type = "button";
  btn.title = "AI Helper";
  btn.textContent = "AI Helper";
  container.appendChild(btn);
  return btn;
}

function ensureResultPanel() {
  let panel = document.getElementById("aiHelperPanel");
  if (panel) return panel;

  panel = document.createElement("div");
  panel.id = "aiHelperPanel";
  Object.assign(panel.style, {
    position: "fixed",
    right: "12px",
    bottom: "calc(24px + env(safe-area-inset-bottom, 0px))",
    width: "520px",
    height: "min(70vh, 560px)",  // Âõ∫ÂÆöÈ´òÂ∫¶Êõ¥Á®≥
    background: "#fff",
    color: "#111",
    border: "1px solid #ddd",
    boxShadow: "0 8px 24px rgba(0,0,0,.15)",
    borderRadius: "10px",
    display: "none",
    zIndex: 99999,
    overflow: "hidden",
    fontFamily: "ui-monospace, SFMono-Regular, Menlo, Consolas, monospace",
    display: "flex",             // ÂÖ≥ÈîÆÔºöÂºπÊÄßÂ∏ÉÂ±Ä
    flexDirection: "column",
  });

  // È°∂ÈÉ®Ê†è
  const header = document.createElement("div");
  Object.assign(header.style, {
    padding: "10px 12px",
    fontWeight: "700",
    borderBottom: "1px solid #eee",
    background: "#f6f7f9",
    color: "#111",
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    userSelect: "none",
    cursor: "move",
    flex: "0 0 auto",
  });

  const headerLeft = document.createElement("div");
  headerLeft.textContent = "AI Helper";
  headerLeft.style.fontWeight = "700";

  const tools = document.createElement("div");
  tools.style.display = "flex";
  tools.style.gap = "8px";

  const themeBtn = document.createElement("button");
  Object.assign(themeBtn.style, btnStyle());
  themeBtn.title = "ÂàáÊç¢‰∏ªÈ¢ò";
  themeBtn.textContent = AIH_THEME === "dark" ? "‚òÄÔ∏è" : "üåô";
  themeBtn.addEventListener("click", () => {
    const now = panel.dataset.theme === "dark" ? "light" : "dark";
    panel.dataset.theme = now;
    themeBtn.textContent = now === "dark" ? "‚òÄÔ∏è" : "üåô";
    applyPanelTheme(panel, header, body);
  });

  const copyBtn = document.createElement("button");
  Object.assign(copyBtn.style, btnStyle());
  copyBtn.title = "Â§çÂà∂ÂÜÖÂÆπ";
  copyBtn.textContent = "Â§çÂà∂";
  copyBtn.addEventListener("click", () => {
    const txt = body.textContent || "";
    navigator.clipboard.writeText(txt).then(
      () => toast("Â∑≤Â§çÂà∂"),
      () => toast("Â§çÂà∂Â§±Ë¥•")
    );
  });

  const clearBtn = document.createElement("button");
  Object.assign(clearBtn.style, btnStyle());
  clearBtn.title = "Ê∏ÖÁ©∫";
  clearBtn.textContent = "Ê∏ÖÁ©∫";
  clearBtn.addEventListener("click", () => {
    body.textContent = "";
    chatHistory.length = 0; // Ê∏ÖÈô§ÂØπËØùÂéÜÂè≤
  });

  const closeBtn = document.createElement("button");
  Object.assign(closeBtn.style, btnStyle());
  closeBtn.title = "ÂÖ≥Èó≠";
  closeBtn.textContent = "√ó";
  closeBtn.addEventListener("click", () => setPanelVisible(false));

  tools.appendChild(themeBtn);
  tools.appendChild(copyBtn);
  tools.appendChild(clearBtn);
  tools.appendChild(closeBtn);

  header.appendChild(headerLeft);
  header.appendChild(tools);

  // ÂÜÖÂÆπÂå∫ÔºàÊòæÁ§∫Êó•Âøó/AI ËæìÂá∫/ËÅäÂ§©Ê∞îÊ≥°Ôºâ
  const body = document.createElement("div");   // ÊîπÊàê div Êõ¥ÁÅµÊ¥ª
  body.id = "aiHelperOutput";
  Object.assign(body.style, {
    margin: 0,
    padding: "12px 14px 12px 14px",
    fontSize: "12px",
    lineHeight: "1.55",
    whiteSpace: "pre-wrap",
    overflow: "auto",
    flex: "1 1 auto",
    scrollbarGutter: "stable",
  });

  // Â∫ïÈÉ®ËæìÂÖ•Âå∫
  const footer = document.createElement("div");
  Object.assign(footer.style, {
    borderTop: "1px solid #eee",
    padding: "8px",
    background: "rgba(0,0,0,0.02)",
    display: "flex",
    gap: "8px",
    alignItems: "flex-end",
    flex: "0 0 auto",
  });

  const input = document.createElement("textarea");
  input.placeholder = "Âêë AI ÊèêÈóÆÔºàEnter ÂèëÈÄÅÔºåShift+Enter Êç¢Ë°åÔºâ";
  Object.assign(input.style, {
    flex: "1 1 auto",
    minHeight: "36px",
    maxHeight: "120px",
    resize: "vertical",
    padding: "8px 10px",
    fontSize: "12px",
    fontFamily: "ui-monospace, SFMono-Regular, Menlo, Consolas, monospace",
    border: "1px solid #ddd",
    borderRadius: "6px",
    outline: "none",
  });

  const sendBtn = document.createElement("button");
  sendBtn.textContent = "ÂèëÈÄÅ";
  Object.assign(sendBtn.style, btnStyle(), {
    padding: "6px 12px",
    fontWeight: "600",
  });

  footer.appendChild(input);
  footer.appendChild(sendBtn);

  // Ë£ÖÈÖç
  panel.appendChild(header);
  panel.appendChild(body);
  panel.appendChild(footer);
  document.body.appendChild(panel);

  // ÊãñÊãΩÁßªÂä®
  makeDraggable(panel, header);

  // ÂàùÂßãÂåñ‰∏ªÈ¢ò‰∏éÂºïÁî®
  panel._header = header;
  panel._body = body;
  panel._input = input;
  panel._sendBtn = sendBtn;
  panel.dataset.theme = AIH_THEME;

  return panel;
}

function btnStyle() {
  return {
    fontSize: "12px",
    padding: "4px 8px",
    border: "1px solid rgba(0,0,0,.1)",
    borderRadius: "6px",
    background: "transparent",
    cursor: "pointer",
  };
}

function applyPanelTheme(panel, header, body) {
  const theme = panel.dataset.theme || "light";
  if (theme === "dark") {
    Object.assign(panel.style, {
      background: "#111",
      color: "#eee",
      border: "1px solid #333",
      boxShadow: "0 8px 24px rgba(0,0,0,.35)",
    });
    Object.assign(header.style, {
      background: "#1a1a1a",
      color: "#fff",
      borderBottom: "1px solid #333",
    });
    Object.assign(body.style, { color: "#eee" });
  } else {
    Object.assign(panel.style, {
      background: "#fff",
      color: "#111",
      border: "1px solid #ddd",
      boxShadow: "0 8px 24px rgba(0,0,0,.15)",
    });
    Object.assign(header.style, {
      background: "#f6f7f9",
      color: "#111",
      borderBottom: "1px solid #eee",
    });
    Object.assign(body.style, { color: "#111" });
  }
}

function setPanelVisible(visible) {
  panel.style.display = visible ? "block" : "none";
  if (visible) panel._input?.focus();
}
function clearPanel() { panel._body.textContent = ""; }
function logLine(text) {
  // Êó•ÂøóË°åÔºà‰øùÊåÅÊóßË°å‰∏∫Ôºâ
  const line = document.createElement("div");
  line.textContent = (panel._body.textContent ? "\n" : "") + text;
  panel._body.appendChild(line);
  panel._body.scrollTop = panel._body.scrollHeight + 32;
}
function appendBlock(text) {
  const pre = document.createElement("pre");
  pre.textContent = text;
  pre.style.margin = "8px 0";
  pre.style.whiteSpace = "pre-wrap";
  panel._body.appendChild(pre);
  panel._body.scrollTop = panel._body.scrollHeight + 32;
}

// ËÅäÂ§©Ê∞îÊ≥°ÔºàÁÆÄÂçïÊ†∑ÂºèÔºâ
function appendChatBubble(role, text) {
  const wrap = document.createElement("div");
  wrap.style.display = "flex";
  wrap.style.margin = "6px 0";

  const bubble = document.createElement("div");
  bubble.textContent = text;
  Object.assign(bubble.style, {
    maxWidth: "85%",
    whiteSpace: "pre-wrap",
    padding: "6px 8px",
    borderRadius: "8px",
    lineHeight: "1.5",
    border: "1px solid rgba(0,0,0,.1)",
  });

  if (panel.dataset.theme === "dark") {
    bubble.style.border = "1px solid rgba(255,255,255,.15)";
  }

  if (role === "user") {
    wrap.style.justifyContent = "flex-end";
    bubble.style.background = "rgba(99, 153, 255, 0.12)";
  } else {
    wrap.style.justifyContent = "flex-start";
    bubble.style.background = "rgba(0,0,0,0.05)";
    if (panel.dataset.theme === "dark") {
      bubble.style.background = "rgba(255,255,255,0.08)";
    }
  }
  wrap.appendChild(bubble);
  panel._body.appendChild(wrap);
  panel._body.scrollTop = panel._body.scrollHeight + 32;
}

function toast(msg) {
  const tip = document.createElement("div");
  tip.textContent = msg;
  Object.assign(tip.style, {
    position: "fixed",
    right: "20px",
    bottom: "90px",
    padding: "8px 12px",
    background: "rgba(0,0,0,.8)",
    color: "#fff",
    borderRadius: "6px",
    fontSize: "12px",
    zIndex: 100000,
  });
  document.body.appendChild(tip);
  setTimeout(() => tip.remove(), 1200);
}

function makeDraggable(panel, handle) {
  let isDown = false;
  let startX, startY, startRight, startBottom;
  handle.addEventListener("mousedown", (e) => {
    isDown = true;
    startX = e.clientX; startY = e.clientY;
    startRight = parseInt(panel.style.right, 10);
    startBottom = parseInt(panel.style.bottom, 10);
    document.addEventListener("mousemove", onMove);
    document.addEventListener("mouseup", onUp);
  });
  function onMove(e) {
    if (!isDown) return;
    const dx = e.clientX - startX;
    const dy = e.clientY - startY;
    panel.style.right = Math.max(0, startRight - dx) + "px";
    panel.style.bottom = Math.max(0, startBottom + dy) + "px";
  }
  function onUp() {
    isDown = false;
    document.removeEventListener("mousemove", onMove);
    document.removeEventListener("mouseup", onUp);
  }
}

/* ===================== PDF.js ÊäΩÂèñ ===================== */
function waitForPDFApp() {
  return new Promise((resolve) => {
    const tick = () => (window.PDFViewerApplication ? resolve() : setTimeout(tick, 100));
    tick();
  });
}
async function prefetchWhenReady() {
  const app = window.PDFViewerApplication;
  while (!app.pdfDocument) await sleep(200);
  cachedText = await extractFullPdfText();
}
async function extractFullPdfText() {
  const app = window.PDFViewerApplication;
  while (!app.pdfDocument) await sleep(200);
  const pdf = app.pdfDocument;
  const num = pdf.numPages;

  const parts = [];
  for (let i = 1; i <= num; i++) {
    logLine(`‚è≥ Ê≠£Âú®ÊäΩÂèñÁ¨¨ ${i}/${num} È°µÊñáÊú¨‚Ä¶`);
    try {
      const page = await pdf.getPage(i);
      const tc = await page.getTextContent({ normalizeWhitespace: true });
      const text = tc.items.map((it) => it.str).join(" ");
      parts.push(`\n\n===== Page ${i}/${num} =====\n${text}`);
    } catch (e) {
      parts.push(`\n\n===== Page ${i}/${num} =====\n[ËØªÂèñÂ§±Ë¥•Ôºö${e?.message || e}]`);
      logLine(`‚ùå Á¨¨ ${i} È°µËØªÂèñÂ§±Ë¥•`);
    }
    await sleep(0);
  }
  return parts.join("\n");
}
function sleep(ms) { return new Promise((r) => setTimeout(r, ms)); }

/* ===================== ÂØπËØùÊëòË¶ÅÔºà‰∏ä‰∏ãÊñáÔºâ ===================== */
async function ensureDocSummary(apiKey) {
  if (docSummary) return docSummary;
  if (!cachedText) return null;
  const shortText = cachedText.slice(0, DOC_SUMMARY_MAX_CHARS);
  const sys =
    "ËØ∑Â∞ÜÁªôÂÆöÊñáÊú¨ÊÄªÁªì‰∏∫‰∏ÄÊÆµ 300~600 Â≠óÁöÑ‰∏≠ÊñáÊëòË¶ÅÔºåÁ™ÅÂá∫‰∏ªÈ¢ò„ÄÅÂÖ≥ÈîÆÊúØËØ≠„ÄÅÊñπÊ≥ï‰∏éÁªìËÆ∫Ôºå‰æø‰∫éÂêéÁª≠ÈóÆÁ≠îÂºïÁî®„ÄÇÂ∞ΩÈáèÂéªÈô§ÂÖ¨Âºè/‰π±Á†Å„ÄÇ";
  const summary = await geminiGenerateWithFallback({
    systemPrompt: sys,
    userText: shortText,
    apiKey,
  });
  docSummary = summary;
  return docSummary;
}

/* ===================== Gemini Ë∞ÉÁî® ===================== */
// Âèñ/Â≠ò Gemini Key
async function ensureGeminiKey() {
  return new Promise((resolve) => {
    chrome.storage.sync.get(["gemini_api_key"], (res) => {
      let key = res.gemini_api_key;
      if (key) return resolve(key);
      key = prompt("ËØ∑ËæìÂÖ• Google Gemini API KeyÔºà‰ªÖÈ¶ñÊ¨°Ôºå‰øùÂ≠òÂú® chrome.storage.syncÔºâ");
      if (key) chrome.storage.sync.set({ gemini_api_key: key }, () => resolve(key));
      else resolve(null);
    });
  });
}

// ÂçïÊ¨° generateContentÔºàÂÖºÂÆπ‰∏§ÁßçË∞ÉÁî®ÔºöÂ≠óÁ¨¶‰∏≤ Êàñ contents Â§öËΩÆÔºâ
async function geminiGenerate({ systemPrompt, userText, contents, apiKey, model }) {
  const url = `${GEMINI_API_BASE}/${encodeURIComponent(model)}:generateContent?key=${encodeURIComponent(apiKey)}`;

  let body;
  if (Array.isArray(contents) && contents.length) {
    // Â§öËΩÆÂØπËØùÔºöÁõ¥Êé•Âèë contentsÔºàrole: "user"/"model"Ôºâ
    body = {
      contents,
      generationConfig: { temperature: TEMPERATURE },
    };
    // Â¶ÇÊûúÈúÄË¶Å systemPromptÔºåÂèØÊãºÂà∞È¶ñÊù° user
    if (systemPrompt && body.contents[0]?.role === "user") {
      const t = body.contents[0].parts?.[0]?.text || "";
      body.contents[0].parts[0].text = `${systemPrompt}\n\n${t}`;
    }
  } else {
    // ÂçïÊù°ÔºöÊää systemPrompt ÊãºÊé•Âà∞ userText Ââç
    body = {
      contents: [
        {
          role: "user",
          parts: [{ text: `${systemPrompt ? systemPrompt + "\n\n" : ""}${userText || ""}` }],
        },
      ],
      generationConfig: { temperature: TEMPERATURE },
    };
  }

  const res = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });

  const errText = await res.text();
  if (!res.ok) {
    throw new Error(`Gemini API ÈîôËØØÔºö${res.status} ${errText}`);
  }

  let data;
  try { data = JSON.parse(errText); } catch { data = {}; }

  const parts = data?.candidates?.[0]?.content?.parts || [];
  const text = parts.map(p => p.text || "").join("").trim();
  return { text, modelUsed: model };
}

// ÈôçÁ∫ßÔºàÂ≠óÁ¨¶‰∏≤ÊèêÁ§∫Ôºâ
async function geminiGenerateWithFallback({ systemPrompt, userText, apiKey }) {
  let lastErr;
  for (const model of GEMINI_MODEL_CHAIN) {
    try {
      logLine(`üîé Â∞ùËØïÊ®°ÂûãÔºö${model} ‚Ä¶`);
      const { text, modelUsed } = await geminiGenerate({ systemPrompt, userText, apiKey, model });
      if (modelUsed !== GEMINI_MODEL_CHAIN[0]) logLine(`‚ÑπÔ∏è Â∑≤Ëá™Âä®ÈôçÁ∫ßÂà∞ÂèØÁî®Ê®°ÂûãÔºö${modelUsed}`);
      return text;
    } catch (e) {
      lastErr = e;
      logLine(`‚ö†Ô∏è Ê®°Âûã‰∏çÂèØÁî®Ôºö${e.message.split("\n")[0]}`);
      continue;
    }
  }
  throw lastErr || new Error("ÊâÄÊúâÂÄôÈÄâÊ®°ÂûãÂùá‰∏çÂèØÁî®„ÄÇ");
}

// ÈôçÁ∫ßÔºàÂ§öËΩÆÂØπËØùÔºâ
async function geminiChatWithFallback({ contents, apiKey, systemPrompt = "" }) {
  let lastErr;
  for (const model of GEMINI_MODEL_CHAIN) {
    try {
      logLine(`üîé Â∞ùËØïÊ®°ÂûãÔºö${model} ‚Ä¶`);
      const { text, modelUsed } = await geminiGenerate({ contents, apiKey, model, systemPrompt });
      if (modelUsed !== GEMINI_MODEL_CHAIN[0]) logLine(`‚ÑπÔ∏è Â∑≤Ëá™Âä®ÈôçÁ∫ßÂà∞ÂèØÁî®Ê®°ÂûãÔºö${modelUsed}`);
      return text;
    } catch (e) {
      lastErr = e;
      logLine(`‚ö†Ô∏è Ê®°Âûã‰∏çÂèØÁî®Ôºö${e.message.split("\n")[0]}`);
      continue;
    }
  }
  throw lastErr || new Error("ÊâÄÊúâÂÄôÈÄâÊ®°ÂûãÂùá‰∏çÂèØÁî®„ÄÇ");
}

/* ===================== Êï¥Êñá/ÂàÜÂùóÂàÜÊûêÔºà‰øùÁïôÂéüÈÄªËæëÔºâ ===================== */
function splitByLength(text, maxLen) {
  if (text.length <= maxLen) return [text];
  const chunks = [];
  for (let i = 0; i < text.length; i += maxLen) chunks.push(text.slice(i, i + maxLen));
  return chunks;
}

async function analyzeWholeDocWithGemini(fullText, apiKey) {
  const system_single =
    "‰Ω†ÊòØÂ≠¶ÊúØ PDF Âä©Êâã„ÄÇËØ∑Ôºö1) ÊèêÂèñ/ÁåúÊµãÊ†áÈ¢òÔºõ2) Êé®Êñ≠Á†îÁ©∂È¢ÜÂüüÔºõ3) ÊÄªÁªìÊ†∏ÂøÉÈóÆÈ¢ò„ÄÅÊñπÊ≥ï„ÄÅÁªìËÆ∫Ôºõ4) ËØÜÂà´ÂèÇËÄÉÊñáÁåÆÂå∫ÊÆµÔºàËã•ÊúâÔºâÔºõ5) ËæìÂá∫ÈÄÇÂêàÂÜôÂú®È´ò‰∫ÆÊóÅÁöÑÁÆÄÁü≠Ê≥®ÈáäÂª∫ËÆÆÔºàÂ≠êÂºπÁÇπÔºâ„ÄÇÁî®‰∏≠ÊñáÔºåÁªìÊûÑÊ∏ÖÊô∞„ÄÇ";

  const chunks = splitByLength(fullText, MAX_CHARS_PER_MESSAGE);

  if (chunks.length === 1) {
    return await geminiGenerateWithFallback({
      systemPrompt: system_single,
      userText: `‰ª•‰∏ãÊòØÊï¥ÁØá PDF ÁöÑÊñáÊú¨ÔºåËØ∑ÈÄöËØªÔºö\n${fullText}`,
      apiKey,
    });
  }

  // Â§öÂùóÔºöÂàÜÂùóÊëòË¶Å ‚Üí Ê±áÊÄª
  logLine(`üì¶ ÊñáÊ°£ËæÉÂ§ßÔºåÂàÜ‰∏∫ ${chunks.length} ÂùóËøõË°åÂ§ÑÁêÜ‚Ä¶`);

  const chunkSummaries = [];
  for (let i = 0; i < chunks.length; i++) {
    logLine(`‚è≥ ÂàÜÂùó ${i + 1}/${chunks.length} ÂàÜÊûê‰∏≠‚Ä¶`);
    const text = await geminiGenerateWithFallback({
      systemPrompt:
        "‰Ω†ÊòØÂ≠¶ÊúØ PDF Âä©Êâã„ÄÇËØ∑ÂØπÊî∂Âà∞ÁöÑËøô‰∏ÄÂàÜÂùóÂÜôË¶ÅÁÇπÊëòË¶ÅÔºåÊ†áÂá∫ÂÖ≥ÈîÆÊúØËØ≠„ÄÅÂèØËÉΩÁöÑÁ´†ËäÇÊ†áÈ¢òÔºå‰ª•ÂèäËã•Âá∫Áé∞‚ÄúÂèÇËÄÉÊñáÁåÆ/References/Bibliography‚ÄùÁ≠âÁ∫øÁ¥¢ËØ∑ËÆ∞ÂΩï„ÄÇ",
      userText: `PDF ÂàÜÂùó ${i + 1}/${chunks.length}Ôºö\n${chunks[i]}`,
      apiKey,
    });
    chunkSummaries.push(`=== Chunk ${i + 1} Summary ===\n${text}`);
  }

  logLine("üîó Ê≠£Âú®Ê±áÊÄªÊâÄÊúâÂàÜÂùóÁªìÊûú‚Ä¶");
  return await geminiGenerateWithFallback({
    systemPrompt:
      "ÊääËøô‰∫õÂàÜÂùóÊëòË¶ÅÂêàÂπ∂‰∏∫ÂÆåÊï¥Êä•ÂëäÔºö1) ËÆ∫ÊñáÊ†áÈ¢òÔºàËã•‰∏çÁ°ÆÂÆöÁªôÂÄôÈÄâÔºâÔºõ2) Á†îÁ©∂È¢ÜÂüüÔºõ3) ‰∏ªË¶ÅË¥°ÁåÆ‰∏éÁªìËÆ∫Ôºõ4) ÊñπÊ≥ï/ÂÆûÈ™åË¶ÅÁÇπÔºõ5) ÂèÇËÄÉÊñáÁåÆÂå∫ÊÆµ‰∏éÊù°ÁõÆÁ∫øÁ¥¢Ôºõ6) ÈÄÇÂêàË¥¥Âú®È´ò‰∫ÆÊóÅÁöÑÁÆÄÁü≠Ê≥®ÈáäÂª∫ËÆÆÔºàË¶ÅÁÇπÂàóÂá∫Ôºâ„ÄÇÁî®‰∏≠ÊñáÔºåÁªìÊûÑÊ∏ÖÊô∞„ÄÇ",
    userText: chunkSummaries.join("\n\n"),
    apiKey,
  });
}
